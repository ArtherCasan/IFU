buildscript {
    repositories {
        mavenCentral()
		jcenter()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
    }
}

apply plugin: 'forge'
apply plugin: 'idea'

idea.module.inheritOutputDirs = true

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.mod.version}"
group= "com.blablabla" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "IFU"

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "run"
}

configurations {
    provided
    embedded
    compile.extendsFrom provided, embedded
}

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "ic2, forestry"
        url = "http://maven.ic2.player.to/"
    }
    maven { // EnderIO & EnderCore
        name 'tterrag Repo'
        url "http://maven.tterrag.com"
    }
    maven { // AppleCore
        url "http://www.ryanliptak.com/maven/"
    }
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
    maven { // GalacticGreg, YAMCore,..
        name 'UsrvDE'
        url "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
    ivy {
        name 'gtnh_download_source_stupid_underscore_typo'
        artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]_[revision].[ext]"
    }
    ivy {
        name 'gtnh_download_source'
        artifactPattern "http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]"
    }
}

dependencies {
    compile "appeng:appliedenergistics2:${config.ae2.version}:dev"
    compile "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
	compile "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    compile "net.industrial-craft:industrialcraft-2:${config.ic2.version}:dev"
    compile "net.sengir.forestry:forestry_${config.minecraft.version}:${config.forestry.version}:dev"
    compile "applecore:AppleCore:${config.applecore.version}:api"
    compile "com.enderio.core:EnderCore:${config.enderiocore.version}:dev"
    compile "com.enderio:EnderIO:${config.enderio.version}:dev"
    compile name: 'buildcraft', version: config.buildcraft.version, classifier: "dev", ext: 'jar'
    compile name: 'CoFHLib', version: config.cofhlib.version, ext: 'jar'
    compile name: 'CoFHCore', version: config.cofhcore.version, ext: 'jar'
    compile name: 'Railcraft', version: config.railcraft.version, ext: 'jar'
    compile name: 'IC2NuclearControl', version: config.nc.version, ext: 'jar'
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    ext.srcFiles = "$projectDir/src/main/resources"
    ext.destDir = "$projectDir/build/classes/main"

    // registering inputs & outputs allow gradle to skip if UP-TO-DATE
    inputs.files srcFiles
    outputs.dir destDir

    println 'starting processResources'
    println 'srcFiles: ' + srcFiles
    println 'destDir: ' + destDir


    copy {
        // replace stuff in mcmod.info, nothing else
        from(srcFiles)
        into(destDir)
        include 'mcmod.info'
            // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version

    }


    copy {
        // copy everything else, thats not the mcmod.info
        from(srcFiles)
        into(destDir)
        exclude 'mcmod.info'

    }
}